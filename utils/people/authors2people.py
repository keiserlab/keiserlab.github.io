#!/usr/bin/env python

# KEISER 2018-06
#
# [Re]generate _people collection from _data/authors.yml

import argparse
import csv
import os
import yaml

DEF_OUTDIR = "people_test"

EXCERPT_DIVIDER = " - " # https://fontawesome.com/icons/

TEMPLATE = """---
# this is autogenerated: do not edit
title: {title}
author: {author}
layout: author-bio
jobtitle: {jobtitle}
bio: {bio}
type: {type}
excerpt: "{excerpt}"
header:
  teaser: {teaser}
papers: {papers}
---"""

EXCERPT_LEN = 160

PAPER_TEMPLATE = """
    - title: {title}
      excerpt: {excerpt}
      link: "{link}"
"""

# columns in papers.csv datafile as defined in ../papers/merge_myncbi.py CSV_HEADER
PCOL_TITLE = 1
PCOL_JOUR = 2
PCOL_DATE = 3
PCOL_AUTH = 4
PCOL_LINK = 5
PCOL_PPRINT_LINK = 7


def underline_author(authors, ncbi_id):
    return authors.replace(ncbi_id, f"<u>{ncbi_id}</u>")

def yml_sanitize(txt):
    return txt.replace(':','-')


def main(fauthors, outdir, fpapers):
    with open(fauthors) as fi:
        ppl_dict = yaml.load(fi, Loader=yaml.FullLoader)

    papers = []
    if fpapers is not None:
        with open(fpapers) as fi:
            reader = csv.reader(fi)
            next(reader)  # header
            for paper in reader:
                papers.append(paper)
        print(f'read {len(papers)} papers')

    for uid, info in ppl_dict.items():
        ncbi_id = info['ncbi_id']
        if ncbi_id is None:
            display_papers = []
        else:
            display_papers = [x for x in papers 
                            if x[PCOL_AUTH].strip('.').lower().find(ncbi_id.lower()) != -1]
        
        paper_yml = ''.join([PAPER_TEMPLATE.format(
            title=yml_sanitize(ppr[PCOL_TITLE]),
            excerpt=yml_sanitize(f"{underline_author(ppr[PCOL_AUTH], ncbi_id)}. __{ppr[PCOL_JOUR]}__. {ppr[PCOL_DATE]}."),
            link=ppr[PCOL_LINK] if ppr[PCOL_LINK] != '' else ppr[PCOL_PPRINT_LINK]
        ) for ppr in display_papers])

        with open(os.path.join(outdir, f'{uid}.md'), 'w', encoding='utf-8') as fo:
            fo.write(TEMPLATE.format(
                title=info['name'],
                author=uid,
                jobtitle=info['title'],
                bio=info['bio'],
                type=info['type'],
                excerpt=info.get('bio_long','')[:EXCERPT_LEN],
                teaser=info['avatar'],
                papers=paper_yml
            ))
    print(f'wrote {len(ppl_dict)} people to {os.path.abspath(outdir)}')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='[Re]generate _people collection from authors.yml'
    )
    parser.add_argument('authors_file', help='Input authors.yml file')
    parser.add_argument('-o', '--outdir', 
                      help=f'Output directory (default: {DEF_OUTDIR})',
                      default=DEF_OUTDIR)
    parser.add_argument('-p', '--paperfile',
                      help='Read papers from FILE',
                      default=None)
    
    args = parser.parse_args()
    main(args.authors_file, args.outdir, args.paperfile)