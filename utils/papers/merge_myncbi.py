#!/usr/bin/env python
#
# KEISER 2018-06-08
#
# Script to parse myNCBI My Bibliography medline export to jekyll page MD

import argparse
import os
import unicodecsv
import csv
import datetime
import itertools
from Bio import Medline

DEF_OUTFILE = 'publications.md'
DOI_URLBASE = 'https://doi.org'
PMID_URLBASE = 'https://www.ncbi.nlm.nih.gov/pubmed'

# Preprint csv columns
PCOL_NCBI_ID = 0
PCOL_JOUR = 1
PCOL_JOURNID = 2
PCOL_AUTH = 3
PCOL_TITLE = 4
PCOL_DATE = 5
PCOL_URL = 6
PCOL_DOI = 7

# Output templates remain unchanged
PG_HDR_TEMPLATE = """---
# this is autogenerated: do not edit
title: Publications
layout: splash
permalink: /publications/
excerpt: "Selected lab publications, with links to preprints and supporting content."
tags: [publications, papers, preprints, manuscripts]
header:
   image: /assets/images/bar-network.png
intro:
    - title: Publications
%s
---
{%% include feature_row id="intro" type="center" %%}
"""

F_ROW_HDR_TEMPLATE = """feature_row%d:
%s
"""

F_ROW_HDR_ITEM = """
  - image_path: /assets/images/papers/%s
    alt: >-
        %s
    title: >-
        %s
    excerpt: >-
        %s
    url: "%s"
    doi: "%s"
    btn_label: >-
        doi &nbsp; <i class="fas fa-external-link-alt"></i>
    btn_class: "btn--primary"
%s"""

F_ROW_HDR_PREPRINT = """    url2: "%s"
    btn2_label: >-
        %s &nbsp; <i class="fas fa-external-link-alt"></i>
    btn2_class: "btn--info"
"""

F_ROW_INCL_TEMPLATE = """
<script type="text/javascript" src="https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js"></script>

{%% include feature_row_paper.html id="feature_row%d" %%}
"""

PAPER_TEMPLATE = '''<span itemprop="isPartOf" itemscope itemtype="http://schema.org/Periodical"><strong>{journal}</strong></span>. \
<span itemprop="datePublished">{date}</span>. \
<span itemprop="author">{authors}</span>.'''

CSV_HEADER = ['id', 'title', 'journal', 'date', 'authors', 'link', 'doi_suffix',
    'preprint_url', 'preprint_journal', 'jekyll_date','type']

def make_htmlsafe(txt):
    "make text html safe (primitive)"
    dangerlist = { '"' : "&quot;" }
    for d, r in dangerlist.items():
        txt = txt.replace(d, r)
    return txt

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

def aid_scrub(aid):
    "put a AID (e.g., DOI) into filename compatible format"
    return aid.replace('/','.')

def get_id_url(record):
    "pull DOI if possible, otherwise PMID: return (id, url, doi)"
    if 'AID' in record:
        aid = list(filter(lambda x: x.lower().find('doi') != -1, record['AID']))
        assert len(aid) == 1
        aid = aid[0].split()[0]
        print(f'\tdoi {aid}')
        return aid_scrub(aid), f'{DOI_URLBASE}/{aid}', aid
    else:
        pmid = record['PMID']
        print(f'\tpmid {pmid}')
        return pmid, f'{PMID_URLBASE}/{pmid}', ""

def convert_date(datestr):
    "convert YYYY Mon Day format into Jekyll post date format"
    try:
        return datetime.datetime.strptime(datestr, "%Y %b %d").strftime("%Y-%m-%d")
    except ValueError:
        try:
            return datetime.datetime.strptime(datestr, "%Y %b").strftime("%Y-%m-%d")
        except ValueError:
            return datetime.datetime.strptime(datestr, "%Y").strftime("%Y-%m-%d")

def main(fmedline, fpreprint, outfile, datafile, fmanual):
    with open(fpreprint) as fi:
        reader = csv.reader(fi)
        print(f'preprint: skipped header: {next(reader)}')
        p_records = []
        aid2preprint = {}
        for row in reader:
            aid = aid_scrub(row[PCOL_NCBI_ID])
            if aid != '':
                aid2preprint[aid] = row
            else:
                p_records.append(row)
    print(f'read {len(p_records) + len(aid2preprint)} preprint records, {len(aid2preprint)} with ncbi ids')

    with open(fmedline) as fi:
        m_records = list(Medline.parse(fi))
    if fmanual is not None:
        with open(fmanual) as fm:
            m_records.extend(list(Medline.parse(fm)))

    publications = []
    # Read preprints/manual first
    for record in p_records:
        pid = '.'.join([record[PCOL_JOUR].replace(' ','_'), record[PCOL_JOURNID]])
        publications.append([
            pid,
            make_htmlsafe(record[PCOL_TITLE]),
            record[PCOL_JOUR],
            record[PCOL_DATE],
            record[PCOL_AUTH],
            '',
            record[PCOL_DOI],
            (record[PCOL_URL], record[PCOL_JOUR]),
            convert_date(record[PCOL_DATE]),
            'preprint'])

    for record in m_records:
        aid, url, doi = get_id_url(record)
        pprint = None
        if aid in aid2preprint:
            pp = aid2preprint[aid]
            pprint = (pp[PCOL_URL], pp[PCOL_JOUR])
        publications.append([
            aid,
            make_htmlsafe(record['TI'].strip('.')),
            record['TA'],
            record['DP'],
            ", ".join(record['AU']),
            url,
            doi,
            pprint,
            convert_date(record['DP']),
            'ncbi'])

    publications.sort(key=lambda x: x[8], reverse=True)

    print(f'read {len(m_records)} medline records')
    print(f'merged into {len(publications)} publication entries (expected {len(p_records) + len(m_records)})')

    frows = []
    for i, p3 in enumerate(grouper(3, publications)):
        items = []
        for p in filter(None, p3):
            pp = p[7]
            pprint = F_ROW_HDR_PREPRINT % pp if pp is not None else ''
            items.append(F_ROW_HDR_ITEM % (
                f'{p[0]}.jpg',
                p[1],
                f'<span itemprop="name">{p[1]}</span>',
                PAPER_TEMPLATE.format(journal=p[2], date=p[3], authors=p[4]),
                p[5],
                p[6],
                pprint,
            ))
        frows.append((F_ROW_HDR_TEMPLATE % (i, ''.join(items))))

    with open(outfile, 'w', encoding='utf-8') as fo:
        fo.write(PG_HDR_TEMPLATE % ''.join(frows))
        for i in range(len(frows)):
            fo.write(F_ROW_INCL_TEMPLATE % i)

    if datafile is not None:
        print(f'outputting structured papers to {datafile} as well')
        with open(datafile, 'w', newline='', encoding='utf-8') as fo:
            writer = csv.writer(fo)
            writer.writerow(CSV_HEADER)
            for row in publications:
                row1 = row[:7]
                row2 = row[8:]
                pp = row[7]
                if pp is not None:
                    pp = list(row[PCOL_DOI])
                else:
                    pp = ['','']
                writer.writerow(row1 + pp + row2)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Parse myNCBI My Bibliography medline export to jekyll page MD'
    )
    
    parser.add_argument('myncbi_file', 
                      help='Input NBIB file from myNCBI')
    parser.add_argument('preprints_file',
                      help='Input CSV file containing preprints')
    
    parser.add_argument('-o', '--outfile',
                      default=DEF_OUTFILE,
                      help=f'Output file (default: {DEF_OUTFILE})')
    
    parser.add_argument('-d', '--datafile',
                      help='Output copy of structured data to CSV file')
    
    parser.add_argument('-m', '--manual',
                      help='Manual MEDLINE/NBIB file for articles not in PubMed')

    args = parser.parse_args()

    main(args.myncbi_file, 
         args.preprints_file,
         args.outfile,
         args.datafile,
         args.manual)